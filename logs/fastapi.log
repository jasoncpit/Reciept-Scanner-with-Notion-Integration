Loading environment variables from .env file...
Activating virtual environment...
Starting FastAPI application in production mode...
App Module: app.main:app
Host: 0.0.0.0
Port: 8000
Workers: 4
Worker Class: uvicorn.workers.UvicornWorker
[2025-07-29 22:56:45 +0100] [23552] [INFO] Starting gunicorn 23.0.0
[2025-07-29 22:56:45 +0100] [23552] [INFO] Listening at: http://0.0.0.0:8000 (23552)
[2025-07-29 22:56:45 +0100] [23552] [INFO] Using worker: uvicorn.workers.UvicornWorker
[2025-07-29 22:56:45 +0100] [23555] [INFO] Booting worker with pid: 23555
[2025-07-29 22:56:45 +0100] [23556] [INFO] Booting worker with pid: 23556
[2025-07-29 22:56:45 +0100] [23557] [INFO] Booting worker with pid: 23557
[2025-07-29 22:56:45 +0100] [23558] [INFO] Booting worker with pid: 23558
INFO:app.notion_client:NotionReceiptManager initialized
INFO:app.notion_client:NotionReceiptManager initialized
INFO:app.notion_client:NotionReceiptManager initialized
INFO:app.notion_client:NotionReceiptManager initialized
[2025-07-29 22:56:46 +0100] [23555] [INFO] Started server process [23555]
[2025-07-29 22:56:46 +0100] [23556] [INFO] Started server process [23556]
[2025-07-29 22:56:46 +0100] [23555] [INFO] Waiting for application startup.
[2025-07-29 22:56:46 +0100] [23557] [INFO] Started server process [23557]
[2025-07-29 22:56:46 +0100] [23556] [INFO] Waiting for application startup.
[2025-07-29 22:56:46 +0100] [23557] [INFO] Waiting for application startup.
[2025-07-29 22:56:46 +0100] [23555] [INFO] Application startup complete.
[2025-07-29 22:56:46 +0100] [23556] [INFO] Application startup complete.
[2025-07-29 22:56:46 +0100] [23557] [INFO] Application startup complete.
[2025-07-29 22:56:46 +0100] [23558] [INFO] Started server process [23558]
[2025-07-29 22:56:46 +0100] [23558] [INFO] Waiting for application startup.
[2025-07-29 22:56:46 +0100] [23558] [INFO] Application startup complete.
127.0.0.1:57072 - "GET /health HTTP/1.1" 200
[2025-07-29 22:56:49 +0100] [23552] [INFO] Handling signal: winch
127.0.0.1:57079 - "GET /health HTTP/1.1" 200
127.0.0.1:57081 - "GET /health HTTP/1.1" 200
127.0.0.1:57083 - "GET / HTTP/1.1" 200
[2025-07-29 22:56:54 +0100] [23552] [INFO] Handling signal: winch
WARNING:security:Security event: {'event_type': 'receipt_scan_requested', 'client_ip': '2a04:4a43:85af:f346:6577:e2d9:5fbd:53d', 'user_agent': 'Scriptable/1 CFNetwork/3857.100.1 Darwin/25.0.0', 'method': 'POST', 'path': '/scan', 'file_size': 7129801, 'content_type': 'image/jpeg'}
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
INFO:app.llm_handler:OpenAIResponse: ParsedResponse[Receipt](id='resp_688943d71d24819fa8f9c37c9ef0397a0ce598413f59dc41', created_at=1753826263.0, error=None, incomplete_details=None, instructions=None, metadata={}, model='gpt-4o-mini-2024-07-18', object='response', output=[ParsedResponseOutputMessage[Receipt](id='msg_688943d8adc8819f82293cf46be157360ce598413f59dc41', content=[ParsedResponseOutputText[Receipt](annotations=[], text='{"date":"2023-07-29T17:44:00Z","total":16.86,"items":["Hot Wings Meal: 10 pc","Zinger Drip Burger Meal"],"items_price":[11.99,10.49],"items_quantity":[1,1],"reciept_category":"Eating out","store_name":"KFC Elham - High Street","store_first_line":null,"store_second_line":null,"store_postcode":null,"discount":5.62}', type='output_text', logprobs=[], parsed=Receipt(date=datetime.datetime(2023, 7, 29, 17, 44, tzinfo=TzInfo(UTC)), total=16.86, items=['Hot Wings Meal: 10 pc', 'Zinger Drip Burger Meal'], items_price=[11.99, 10.49], items_quantity=[1, 1], reciept_category=<ReceiptCategory.EATING_OUT: 'Eating out'>, store_name='KFC Elham - High Street', store_first_line=None, store_second_line=None, store_postcode=None, discount=5.62))], role='assistant', status='completed', type='message')], parallel_tool_calls=True, temperature=1.0, tool_choice='auto', tools=[], top_p=1.0, background=False, max_output_tokens=None, max_tool_calls=None, previous_response_id=None, prompt=None, reasoning=Reasoning(effort=None, generate_summary=None, summary=None), service_tier='default', status='completed', text=ResponseTextConfig(format=ResponseFormatTextJSONSchemaConfig(name='Receipt', schema_={'$defs': {'ReceiptCategory': {'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}}, 'properties': {'date': {'description': 'The date of the receipt in the format of YYYY-MM-DD', 'format': 'date-time', 'title': 'Date', 'type': 'string'}, 'total': {'description': 'The total amount of the receipt', 'title': 'Total', 'type': 'number'}, 'items': {'description': 'The items on the receipt', 'items': {'type': 'string'}, 'title': 'Items', 'type': 'array'}, 'items_price': {'description': 'The price of each item', 'items': {'type': 'number'}, 'title': 'Items Price', 'type': 'array'}, 'items_quantity': {'description': 'The quantity of each item', 'items': {'type': 'integer'}, 'title': 'Items Quantity', 'type': 'array'}, 'reciept_category': {'description': "The category of the receipt - Happy Happy, Grocery, Eating out, Miscellaneous. Happy Happy is the category for any purchases for leisure, shopping, etc. Grocery is the category for any purchases for groceries. Eating out is the category for any purchases for eating out. Miscellaneous is the category for any purchases that don't fit into the other categories.", 'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}, 'store_name': {'description': 'The name of the store', 'title': 'Store Name', 'type': 'string'}, 'store_first_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The first line of the address of the store', 'title': 'Store First Line'}, 'store_second_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The second line of the address of the store', 'title': 'Store Second Line'}, 'store_postcode': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The postcode of the store', 'title': 'Store Postcode'}, 'discount': {'anyOf': [{'type': 'number'}, {'type': 'null'}], 'description': 'The discount amount of the receipt', 'title': 'Discount'}}, 'required': ['date', 'total', 'items', 'items_price', 'items_quantity', 'reciept_category', 'store_name', 'store_first_line', 'store_second_line', 'store_postcode', 'discount'], 'title': 'Receipt', 'type': 'object', 'additionalProperties': False}, type='json_schema', description=None, strict=True)), top_logprobs=0, truncation='disabled', usage=ResponseUsage(input_tokens=26246, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=103, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=26349), user=None, prompt_cache_key=None, safety_identifier=None, store=True)
INFO:app.llm_handler:Receipt dictionary: {'date': datetime.datetime(2023, 7, 29, 17, 44, tzinfo=TzInfo(UTC)), 'total': 16.86, 'items': ['Hot Wings Meal: 10 pc', 'Zinger Drip Burger Meal'], 'items_price': [11.99, 10.49], 'items_quantity': [1, 1], 'reciept_category': 'Eating out', 'store_name': 'KFC Elham - High Street', 'store_first_line': 'Unknown', 'store_second_line': 'Unknown', 'store_postcode': 'Unknown', 'discount': 5.62}
INFO:app.notion_client:Creating new entry with properties: KFC Elham - High Street
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:app.notion_client:Page created 
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/databases "HTTP/1.1 200 OK"
INFO:app.notion_client:Item database created: with 2 items
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:app.notion_client:Items created within page
2a04:4a43:85af:f346:6577:e2d9:5fbd:53d:0 - "POST /scan HTTP/1.1" 200
WARNING:security:Security event: {'event_type': 'receipt_scan_requested', 'client_ip': '2a04:4a43:85af:f346:6577:e2d9:5fbd:53d', 'user_agent': 'Scriptable/1 CFNetwork/3857.100.1 Darwin/25.0.0', 'method': 'POST', 'path': '/scan', 'file_size': 6461464, 'content_type': 'image/jpeg'}
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
INFO:app.llm_handler:OpenAIResponse: ParsedResponse[Receipt](id='resp_68894625ce8c8191b3d03f1e71b4c9e30602dce221015ced', created_at=1753826854.0, error=None, incomplete_details=None, instructions=None, metadata={}, model='gpt-4o-mini-2024-07-18', object='response', output=[ParsedResponseOutputMessage[Receipt](id='msg_688946272ec4819193ea53bad7d04c4b0602dce221015ced', content=[ParsedResponseOutputText[Receipt](annotations=[], text='{"date":"2023-07-29T17:50:00Z","total":16.86,"items":["Hot Wings Meal: 10 pc","Zinger Drip Burger Meal"],"items_price":[11.99,10.49],"items_quantity":[1,1],"reciept_category":"Eating out","store_name":"KFC Eltham - High Street","store_first_line":null,"store_second_line":null,"store_postcode":null,"discount":5.62}', type='output_text', logprobs=[], parsed=Receipt(date=datetime.datetime(2023, 7, 29, 17, 50, tzinfo=TzInfo(UTC)), total=16.86, items=['Hot Wings Meal: 10 pc', 'Zinger Drip Burger Meal'], items_price=[11.99, 10.49], items_quantity=[1, 1], reciept_category=<ReceiptCategory.EATING_OUT: 'Eating out'>, store_name='KFC Eltham - High Street', store_first_line=None, store_second_line=None, store_postcode=None, discount=5.62))], role='assistant', status='completed', type='message')], parallel_tool_calls=True, temperature=1.0, tool_choice='auto', tools=[], top_p=1.0, background=False, max_output_tokens=None, max_tool_calls=None, previous_response_id=None, prompt=None, reasoning=Reasoning(effort=None, generate_summary=None, summary=None), service_tier='default', status='completed', text=ResponseTextConfig(format=ResponseFormatTextJSONSchemaConfig(name='Receipt', schema_={'$defs': {'ReceiptCategory': {'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}}, 'properties': {'date': {'description': 'The date of the receipt in the format of YYYY-MM-DD', 'format': 'date-time', 'title': 'Date', 'type': 'string'}, 'total': {'description': 'The total amount of the receipt', 'title': 'Total', 'type': 'number'}, 'items': {'description': 'The items on the receipt', 'items': {'type': 'string'}, 'title': 'Items', 'type': 'array'}, 'items_price': {'description': 'The price of each item', 'items': {'type': 'number'}, 'title': 'Items Price', 'type': 'array'}, 'items_quantity': {'description': 'The quantity of each item', 'items': {'type': 'integer'}, 'title': 'Items Quantity', 'type': 'array'}, 'reciept_category': {'description': "The category of the receipt - Happy Happy, Grocery, Eating out, Miscellaneous. Happy Happy is the category for any purchases for leisure, shopping, etc. Grocery is the category for any purchases for groceries. Eating out is the category for any purchases for eating out. Miscellaneous is the category for any purchases that don't fit into the other categories.", 'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}, 'store_name': {'description': 'The name of the store', 'title': 'Store Name', 'type': 'string'}, 'store_first_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The first line of the address of the store', 'title': 'Store First Line'}, 'store_second_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The second line of the address of the store', 'title': 'Store Second Line'}, 'store_postcode': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The postcode of the store', 'title': 'Store Postcode'}, 'discount': {'anyOf': [{'type': 'number'}, {'type': 'null'}], 'description': 'The discount amount of the receipt', 'title': 'Discount'}}, 'required': ['date', 'total', 'items', 'items_price', 'items_quantity', 'reciept_category', 'store_name', 'store_first_line', 'store_second_line', 'store_postcode', 'discount'], 'title': 'Receipt', 'type': 'object', 'additionalProperties': False}, type='json_schema', description=None, strict=True)), top_logprobs=0, truncation='disabled', usage=ResponseUsage(input_tokens=26246, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=103, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=26349), user=None, prompt_cache_key=None, safety_identifier=None, store=True)
INFO:app.llm_handler:Receipt dictionary: {'date': datetime.datetime(2023, 7, 29, 17, 50, tzinfo=TzInfo(UTC)), 'total': 16.86, 'items': ['Hot Wings Meal: 10 pc', 'Zinger Drip Burger Meal'], 'items_price': [11.99, 10.49], 'items_quantity': [1, 1], 'reciept_category': 'Eating out', 'store_name': 'KFC Eltham - High Street', 'store_first_line': 'Unknown', 'store_second_line': 'Unknown', 'store_postcode': 'Unknown', 'discount': 5.62}
INFO:app.notion_client:Creating new entry with properties: KFC Eltham - High Street
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:app.notion_client:Page created 
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/databases "HTTP/1.1 200 OK"
INFO:app.notion_client:Item database created: with 2 items
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:app.notion_client:Items created within page
2a04:4a43:85af:f346:6577:e2d9:5fbd:53d:0 - "POST /scan HTTP/1.1" 200
WARNING:security:Security event: {'event_type': 'receipt_scan_requested', 'client_ip': '2a04:4a43:85af:f346:6577:e2d9:5fbd:53d', 'user_agent': 'Scriptable/1 CFNetwork/3857.100.1 Darwin/25.0.0', 'method': 'POST', 'path': '/scan', 'file_size': 6841791, 'content_type': 'image/jpeg'}
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
INFO:app.llm_handler:OpenAIResponse: ParsedResponse[Receipt](id='resp_6889476749a081a2b28fde1f4d20803b0f0a00c078a60dce', created_at=1753827175.0, error=None, incomplete_details=None, instructions=None, metadata={}, model='gpt-4o-mini-2024-07-18', object='response', output=[ParsedResponseOutputMessage[Receipt](id='msg_68894768b98081a2a23b88fbd4996f7d0f0a00c078a60dce', content=[ParsedResponseOutputText[Receipt](annotations=[], text='{\n  "date": "2023-07-29T17:50:00Z",\n  "total": 16.86,\n  "items": [\n    "Hot Wings Meal: 10 pc",\n    "Zinger Drip Burger Meal"\n  ],\n  "items_price": [\n    17.99,\n    10.49\n  ],\n  "items_quantity": [\n    1,\n    1\n  ],\n  "reciept_category": "Eating out",\n  "store_name": "KFC Eltham - High Street",\n  "store_first_line": null,\n  "store_second_line": null,\n  "store_postcode": null,\n  "discount": 5.62\n}', type='output_text', logprobs=[], parsed=Receipt(date=datetime.datetime(2023, 7, 29, 17, 50, tzinfo=TzInfo(UTC)), total=16.86, items=['Hot Wings Meal: 10 pc', 'Zinger Drip Burger Meal'], items_price=[17.99, 10.49], items_quantity=[1, 1], reciept_category=<ReceiptCategory.EATING_OUT: 'Eating out'>, store_name='KFC Eltham - High Street', store_first_line=None, store_second_line=None, store_postcode=None, discount=5.62))], role='assistant', status='completed', type='message')], parallel_tool_calls=True, temperature=1.0, tool_choice='auto', tools=[], top_p=1.0, background=False, max_output_tokens=None, max_tool_calls=None, previous_response_id=None, prompt=None, reasoning=Reasoning(effort=None, generate_summary=None, summary=None), service_tier='default', status='completed', text=ResponseTextConfig(format=ResponseFormatTextJSONSchemaConfig(name='Receipt', schema_={'$defs': {'ReceiptCategory': {'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}}, 'properties': {'date': {'description': 'The date of the receipt in the format of YYYY-MM-DD', 'format': 'date-time', 'title': 'Date', 'type': 'string'}, 'total': {'description': 'The total amount of the receipt', 'title': 'Total', 'type': 'number'}, 'items': {'description': 'The items on the receipt', 'items': {'type': 'string'}, 'title': 'Items', 'type': 'array'}, 'items_price': {'description': 'The price of each item', 'items': {'type': 'number'}, 'title': 'Items Price', 'type': 'array'}, 'items_quantity': {'description': 'The quantity of each item', 'items': {'type': 'integer'}, 'title': 'Items Quantity', 'type': 'array'}, 'reciept_category': {'description': "The category of the receipt - Happy Happy, Grocery, Eating out, Miscellaneous. Happy Happy is the category for any purchases for leisure, shopping, etc. Grocery is the category for any purchases for groceries. Eating out is the category for any purchases for eating out. Miscellaneous is the category for any purchases that don't fit into the other categories.", 'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}, 'store_name': {'description': 'The name of the store', 'title': 'Store Name', 'type': 'string'}, 'store_first_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The first line of the address of the store', 'title': 'Store First Line'}, 'store_second_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The second line of the address of the store', 'title': 'Store Second Line'}, 'store_postcode': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The postcode of the store', 'title': 'Store Postcode'}, 'discount': {'anyOf': [{'type': 'number'}, {'type': 'null'}], 'description': 'The discount amount of the receipt', 'title': 'Discount'}}, 'required': ['date', 'total', 'items', 'items_price', 'items_quantity', 'reciept_category', 'store_name', 'store_first_line', 'store_second_line', 'store_postcode', 'discount'], 'title': 'Receipt', 'type': 'object', 'additionalProperties': False}, type='json_schema', description=None, strict=True)), top_logprobs=0, truncation='disabled', usage=ResponseUsage(input_tokens=26246, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=151, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=26397), user=None, prompt_cache_key=None, safety_identifier=None, store=True)
INFO:app.llm_handler:Receipt dictionary: {'date': datetime.datetime(2023, 7, 29, 17, 50, tzinfo=TzInfo(UTC)), 'total': 16.86, 'items': ['Hot Wings Meal: 10 pc', 'Zinger Drip Burger Meal'], 'items_price': [17.99, 10.49], 'items_quantity': [1, 1], 'reciept_category': 'Eating out', 'store_name': 'KFC Eltham - High Street', 'store_first_line': 'Unknown', 'store_second_line': 'Unknown', 'store_postcode': 'Unknown', 'discount': 5.62}
INFO:app.notion_client:Creating new entry with properties: KFC Eltham - High Street
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:app.notion_client:Page created 
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/databases "HTTP/1.1 200 OK"
INFO:app.notion_client:Item database created: with 2 items
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:app.notion_client:Items created within page
WARNING:security:Security event: {'event_type': 'receipt_scan_requested', 'client_ip': '2a04:4a43:85af:f346:6577:e2d9:5fbd:53d', 'user_agent': 'Scriptable/1 CFNetwork/3857.100.1 Darwin/25.0.0', 'method': 'POST', 'path': '/scan', 'file_size': 6150360, 'content_type': 'image/jpeg'}
WARNING:security:Security event: {'event_type': 'receipt_scan_requested', 'client_ip': '2a04:4a43:85af:f346:6577:e2d9:5fbd:53d', 'user_agent': 'Scriptable/1 CFNetwork/3857.100.1 Darwin/25.0.0', 'method': 'POST', 'path': '/scan', 'file_size': 6603239, 'content_type': 'image/jpeg'}
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
INFO:app.llm_handler:OpenAIResponse: ParsedResponse[Receipt](id='resp_68894781f29c819f8fff6e56a2a3c7a909d11cf31a209641', created_at=1753827202.0, error=None, incomplete_details=None, instructions=None, metadata={}, model='gpt-4o-mini-2024-07-18', object='response', output=[ParsedResponseOutputMessage[Receipt](id='msg_68894783a498819faff2a060c9ec511b09d11cf31a209641', content=[ParsedResponseOutputText[Receipt](annotations=[], text='{"date":"2023-07-29T17:44:00Z","total":16.86,"items":["1 x Hot Wings Meal: 10 pc","1 x Zinger Drip Burger Meal"],"items_price":[11.99,10.49],"items_quantity":[1,1],"reciept_category":"Eating out","store_name":"KFC Eltham","store_first_line":"High Street","store_second_line":null,"store_postcode":null,"discount":5.62}', type='output_text', logprobs=[], parsed=Receipt(date=datetime.datetime(2023, 7, 29, 17, 44, tzinfo=TzInfo(UTC)), total=16.86, items=['1 x Hot Wings Meal: 10 pc', '1 x Zinger Drip Burger Meal'], items_price=[11.99, 10.49], items_quantity=[1, 1], reciept_category=<ReceiptCategory.EATING_OUT: 'Eating out'>, store_name='KFC Eltham', store_first_line='High Street', store_second_line=None, store_postcode=None, discount=5.62))], role='assistant', status='completed', type='message')], parallel_tool_calls=True, temperature=1.0, tool_choice='auto', tools=[], top_p=1.0, background=False, max_output_tokens=None, max_tool_calls=None, previous_response_id=None, prompt=None, reasoning=Reasoning(effort=None, generate_summary=None, summary=None), service_tier='default', status='completed', text=ResponseTextConfig(format=ResponseFormatTextJSONSchemaConfig(name='Receipt', schema_={'$defs': {'ReceiptCategory': {'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}}, 'properties': {'date': {'description': 'The date of the receipt in the format of YYYY-MM-DD', 'format': 'date-time', 'title': 'Date', 'type': 'string'}, 'total': {'description': 'The total amount of the receipt', 'title': 'Total', 'type': 'number'}, 'items': {'description': 'The items on the receipt', 'items': {'type': 'string'}, 'title': 'Items', 'type': 'array'}, 'items_price': {'description': 'The price of each item', 'items': {'type': 'number'}, 'title': 'Items Price', 'type': 'array'}, 'items_quantity': {'description': 'The quantity of each item', 'items': {'type': 'integer'}, 'title': 'Items Quantity', 'type': 'array'}, 'reciept_category': {'description': "The category of the receipt - Happy Happy, Grocery, Eating out, Miscellaneous. Happy Happy is the category for any purchases for leisure, shopping, etc. Grocery is the category for any purchases for groceries. Eating out is the category for any purchases for eating out. Miscellaneous is the category for any purchases that don't fit into the other categories.", 'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}, 'store_name': {'description': 'The name of the store', 'title': 'Store Name', 'type': 'string'}, 'store_first_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The first line of the address of the store', 'title': 'Store First Line'}, 'store_second_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The second line of the address of the store', 'title': 'Store Second Line'}, 'store_postcode': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The postcode of the store', 'title': 'Store Postcode'}, 'discount': {'anyOf': [{'type': 'number'}, {'type': 'null'}], 'description': 'The discount amount of the receipt', 'title': 'Discount'}}, 'required': ['date', 'total', 'items', 'items_price', 'items_quantity', 'reciept_category', 'store_name', 'store_first_line', 'store_second_line', 'store_postcode', 'discount'], 'title': 'Receipt', 'type': 'object', 'additionalProperties': False}, type='json_schema', description=None, strict=True)), top_logprobs=0, truncation='disabled', usage=ResponseUsage(input_tokens=26246, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=105, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=26351), user=None, prompt_cache_key=None, safety_identifier=None, store=True)
INFO:app.llm_handler:Receipt dictionary: {'date': datetime.datetime(2023, 7, 29, 17, 44, tzinfo=TzInfo(UTC)), 'total': 16.86, 'items': ['1 x Hot Wings Meal: 10 pc', '1 x Zinger Drip Burger Meal'], 'items_price': [11.99, 10.49], 'items_quantity': [1, 1], 'reciept_category': 'Eating out', 'store_name': 'KFC Eltham', 'store_first_line': 'High Street', 'store_second_line': 'Unknown', 'store_postcode': 'Unknown', 'discount': 5.62}
INFO:app.notion_client:Creating new entry with properties: KFC Eltham
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:app.notion_client:Page created 
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/databases "HTTP/1.1 200 OK"
INFO:app.notion_client:Item database created: with 2 items
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:app.notion_client:Items created within page
2a04:4a43:85af:f346:6577:e2d9:5fbd:53d:0 - "POST /scan HTTP/1.1" 200
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
INFO:app.llm_handler:OpenAIResponse: ParsedResponse[Receipt](id='resp_688947896028819d8178f65f0229ccd7028f26a05cc58158', created_at=1753827209.0, error=None, incomplete_details=None, instructions=None, metadata={}, model='gpt-4o-mini-2024-07-18', object='response', output=[ParsedResponseOutputMessage[Receipt](id='msg_6889478af810819db2ed545d104ce805028f26a05cc58158', content=[ParsedResponseOutputText[Receipt](annotations=[], text='{"date":"2023-07-29T17:44:00Z","total":16.86,"items":["Hot Wings Meal: 10 pc","Zinger Drip Burger Meal"],"items_price":[11.99,10.49],"items_quantity":[1,1],"reciept_category":"Eating out","store_name":"KFC Eltham - High Street","store_first_line":null,"store_second_line":null,"store_postcode":null,"discount":5.62}', type='output_text', logprobs=[], parsed=Receipt(date=datetime.datetime(2023, 7, 29, 17, 44, tzinfo=TzInfo(UTC)), total=16.86, items=['Hot Wings Meal: 10 pc', 'Zinger Drip Burger Meal'], items_price=[11.99, 10.49], items_quantity=[1, 1], reciept_category=<ReceiptCategory.EATING_OUT: 'Eating out'>, store_name='KFC Eltham - High Street', store_first_line=None, store_second_line=None, store_postcode=None, discount=5.62))], role='assistant', status='completed', type='message')], parallel_tool_calls=True, temperature=1.0, tool_choice='auto', tools=[], top_p=1.0, background=False, max_output_tokens=None, max_tool_calls=None, previous_response_id=None, prompt=None, reasoning=Reasoning(effort=None, generate_summary=None, summary=None), service_tier='default', status='completed', text=ResponseTextConfig(format=ResponseFormatTextJSONSchemaConfig(name='Receipt', schema_={'$defs': {'ReceiptCategory': {'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}}, 'properties': {'date': {'description': 'The date of the receipt in the format of YYYY-MM-DD', 'format': 'date-time', 'title': 'Date', 'type': 'string'}, 'total': {'description': 'The total amount of the receipt', 'title': 'Total', 'type': 'number'}, 'items': {'description': 'The items on the receipt', 'items': {'type': 'string'}, 'title': 'Items', 'type': 'array'}, 'items_price': {'description': 'The price of each item', 'items': {'type': 'number'}, 'title': 'Items Price', 'type': 'array'}, 'items_quantity': {'description': 'The quantity of each item', 'items': {'type': 'integer'}, 'title': 'Items Quantity', 'type': 'array'}, 'reciept_category': {'description': "The category of the receipt - Happy Happy, Grocery, Eating out, Miscellaneous. Happy Happy is the category for any purchases for leisure, shopping, etc. Grocery is the category for any purchases for groceries. Eating out is the category for any purchases for eating out. Miscellaneous is the category for any purchases that don't fit into the other categories.", 'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}, 'store_name': {'description': 'The name of the store', 'title': 'Store Name', 'type': 'string'}, 'store_first_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The first line of the address of the store', 'title': 'Store First Line'}, 'store_second_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The second line of the address of the store', 'title': 'Store Second Line'}, 'store_postcode': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The postcode of the store', 'title': 'Store Postcode'}, 'discount': {'anyOf': [{'type': 'number'}, {'type': 'null'}], 'description': 'The discount amount of the receipt', 'title': 'Discount'}}, 'required': ['date', 'total', 'items', 'items_price', 'items_quantity', 'reciept_category', 'store_name', 'store_first_line', 'store_second_line', 'store_postcode', 'discount'], 'title': 'Receipt', 'type': 'object', 'additionalProperties': False}, type='json_schema', description=None, strict=True)), top_logprobs=0, truncation='disabled', usage=ResponseUsage(input_tokens=26246, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=103, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=26349), user=None, prompt_cache_key=None, safety_identifier=None, store=True)
INFO:app.llm_handler:Receipt dictionary: {'date': datetime.datetime(2023, 7, 29, 17, 44, tzinfo=TzInfo(UTC)), 'total': 16.86, 'items': ['Hot Wings Meal: 10 pc', 'Zinger Drip Burger Meal'], 'items_price': [11.99, 10.49], 'items_quantity': [1, 1], 'reciept_category': 'Eating out', 'store_name': 'KFC Eltham - High Street', 'store_first_line': 'Unknown', 'store_second_line': 'Unknown', 'store_postcode': 'Unknown', 'discount': 5.62}
INFO:app.notion_client:Creating new entry with properties: KFC Eltham - High Street
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:app.notion_client:Page created 
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/databases "HTTP/1.1 200 OK"
INFO:app.notion_client:Item database created: with 2 items
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:app.notion_client:Items created within page
2a04:4a43:85af:f346:6577:e2d9:5fbd:53d:0 - "POST /scan HTTP/1.1" 200
WARNING:security:Security event: {'event_type': 'receipt_scan_requested', 'client_ip': '2a04:4a43:85af:f346:6577:e2d9:5fbd:53d', 'user_agent': 'Scriptable/1 CFNetwork/3857.100.1 Darwin/25.0.0', 'method': 'POST', 'path': '/scan', 'file_size': 5362484, 'content_type': 'image/jpeg'}
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
INFO:app.llm_handler:OpenAIResponse: ParsedResponse[Receipt](id='resp_6889479f168c819da19e8addc06288cc0e9124a79372f870', created_at=1753827231.0, error=None, incomplete_details=None, instructions=None, metadata={}, model='gpt-4o-mini-2024-07-18', object='response', output=[ParsedResponseOutputMessage[Receipt](id='msg_688947a0a39c819db3b2c994381ba04d0e9124a79372f870', content=[ParsedResponseOutputText[Receipt](annotations=[], text='{"date":"2023-10-03T00:00:00Z","total":31.98,"items":["4 x Egg Wrap Meal","2 x Chorizo Dry Breakfast Meal"],"items_price":[7.99,11.99],"items_quantity":[4,2],"reciept_category":"Eating out","store_name":"Uber Eats","store_first_line":null,"store_second_line":null,"store_postcode":null,"discount":null}', type='output_text', logprobs=[], parsed=Receipt(date=datetime.datetime(2023, 10, 3, 0, 0, tzinfo=TzInfo(UTC)), total=31.98, items=['4 x Egg Wrap Meal', '2 x Chorizo Dry Breakfast Meal'], items_price=[7.99, 11.99], items_quantity=[4, 2], reciept_category=<ReceiptCategory.EATING_OUT: 'Eating out'>, store_name='Uber Eats', store_first_line=None, store_second_line=None, store_postcode=None, discount=None))], role='assistant', status='completed', type='message')], parallel_tool_calls=True, temperature=1.0, tool_choice='auto', tools=[], top_p=1.0, background=False, max_output_tokens=None, max_tool_calls=None, previous_response_id=None, prompt=None, reasoning=Reasoning(effort=None, generate_summary=None, summary=None), service_tier='default', status='completed', text=ResponseTextConfig(format=ResponseFormatTextJSONSchemaConfig(name='Receipt', schema_={'$defs': {'ReceiptCategory': {'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}}, 'properties': {'date': {'description': 'The date of the receipt in the format of YYYY-MM-DD', 'format': 'date-time', 'title': 'Date', 'type': 'string'}, 'total': {'description': 'The total amount of the receipt', 'title': 'Total', 'type': 'number'}, 'items': {'description': 'The items on the receipt', 'items': {'type': 'string'}, 'title': 'Items', 'type': 'array'}, 'items_price': {'description': 'The price of each item', 'items': {'type': 'number'}, 'title': 'Items Price', 'type': 'array'}, 'items_quantity': {'description': 'The quantity of each item', 'items': {'type': 'integer'}, 'title': 'Items Quantity', 'type': 'array'}, 'reciept_category': {'description': "The category of the receipt - Happy Happy, Grocery, Eating out, Miscellaneous. Happy Happy is the category for any purchases for leisure, shopping, etc. Grocery is the category for any purchases for groceries. Eating out is the category for any purchases for eating out. Miscellaneous is the category for any purchases that don't fit into the other categories.", 'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}, 'store_name': {'description': 'The name of the store', 'title': 'Store Name', 'type': 'string'}, 'store_first_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The first line of the address of the store', 'title': 'Store First Line'}, 'store_second_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The second line of the address of the store', 'title': 'Store Second Line'}, 'store_postcode': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The postcode of the store', 'title': 'Store Postcode'}, 'discount': {'anyOf': [{'type': 'number'}, {'type': 'null'}], 'description': 'The discount amount of the receipt', 'title': 'Discount'}}, 'required': ['date', 'total', 'items', 'items_price', 'items_quantity', 'reciept_category', 'store_name', 'store_first_line', 'store_second_line', 'store_postcode', 'discount'], 'title': 'Receipt', 'type': 'object', 'additionalProperties': False}, type='json_schema', description=None, strict=True)), top_logprobs=0, truncation='disabled', usage=ResponseUsage(input_tokens=26246, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=96, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=26342), user=None, prompt_cache_key=None, safety_identifier=None, store=True)
INFO:app.llm_handler:Receipt dictionary: {'date': datetime.datetime(2023, 10, 3, 0, 0, tzinfo=TzInfo(UTC)), 'total': 31.98, 'items': ['4 x Egg Wrap Meal', '2 x Chorizo Dry Breakfast Meal'], 'items_price': [7.99, 11.99], 'items_quantity': [4, 2], 'reciept_category': 'Eating out', 'store_name': 'Uber Eats', 'store_first_line': 'Unknown', 'store_second_line': 'Unknown', 'store_postcode': 'Unknown', 'discount': 'Unknown'}
INFO:app.notion_client:Creating new entry with properties: Uber Eats
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 400 Bad Request"
2a04:4a43:85af:f346:6577:e2d9:5fbd:53d:0 - "POST /scan HTTP/1.1" 200
WARNING:security:Security event: {'event_type': 'receipt_scan_requested', 'client_ip': '2a04:4a43:85af:f346:6577:e2d9:5fbd:53d', 'user_agent': 'Scriptable/1 CFNetwork/3857.100.1 Darwin/25.0.0', 'method': 'POST', 'path': '/scan', 'file_size': 6469621, 'content_type': 'image/jpeg'}
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
INFO:app.llm_handler:OpenAIResponse: ParsedResponse[Receipt](id='resp_688947c822b0819f99792c4e60dc65d50d7193a0a0d64d63', created_at=1753827272.0, error=None, incomplete_details=None, instructions=None, metadata={}, model='gpt-4o-mini-2024-07-18', object='response', output=[ParsedResponseOutputMessage[Receipt](id='msg_688947c94ea0819fa8fbb7c05b4ae7910d7193a0a0d64d63', content=[ParsedResponseOutputText[Receipt](annotations=[], text='{\n  "date": "2023-07-29T17:50:00Z",\n  "total": 16.86,\n  "items": [\n    "1 x Hot Wings Meal: 10 pc",\n    "1 x Zinger Drip Burger Meal"\n  ],\n  "items_price": [\n    11.99,\n    10.49\n  ],\n  "items_quantity": [\n    1,\n    1\n  ],\n  "reciept_category": "Eating out",\n  "store_name": "KFC Eltham - High Street",\n  "store_first_line": null,\n  "store_second_line": null,\n  "store_postcode": null,\n  "discount": 5.62\n}', type='output_text', logprobs=[], parsed=Receipt(date=datetime.datetime(2023, 7, 29, 17, 50, tzinfo=TzInfo(UTC)), total=16.86, items=['1 x Hot Wings Meal: 10 pc', '1 x Zinger Drip Burger Meal'], items_price=[11.99, 10.49], items_quantity=[1, 1], reciept_category=<ReceiptCategory.EATING_OUT: 'Eating out'>, store_name='KFC Eltham - High Street', store_first_line=None, store_second_line=None, store_postcode=None, discount=5.62))], role='assistant', status='completed', type='message')], parallel_tool_calls=True, temperature=1.0, tool_choice='auto', tools=[], top_p=1.0, background=False, max_output_tokens=None, max_tool_calls=None, previous_response_id=None, prompt=None, reasoning=Reasoning(effort=None, generate_summary=None, summary=None), service_tier='default', status='completed', text=ResponseTextConfig(format=ResponseFormatTextJSONSchemaConfig(name='Receipt', schema_={'$defs': {'ReceiptCategory': {'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}}, 'properties': {'date': {'description': 'The date of the receipt in the format of YYYY-MM-DD', 'format': 'date-time', 'title': 'Date', 'type': 'string'}, 'total': {'description': 'The total amount of the receipt', 'title': 'Total', 'type': 'number'}, 'items': {'description': 'The items on the receipt', 'items': {'type': 'string'}, 'title': 'Items', 'type': 'array'}, 'items_price': {'description': 'The price of each item', 'items': {'type': 'number'}, 'title': 'Items Price', 'type': 'array'}, 'items_quantity': {'description': 'The quantity of each item', 'items': {'type': 'integer'}, 'title': 'Items Quantity', 'type': 'array'}, 'reciept_category': {'description': "The category of the receipt - Happy Happy, Grocery, Eating out, Miscellaneous. Happy Happy is the category for any purchases for leisure, shopping, etc. Grocery is the category for any purchases for groceries. Eating out is the category for any purchases for eating out. Miscellaneous is the category for any purchases that don't fit into the other categories.", 'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}, 'store_name': {'description': 'The name of the store', 'title': 'Store Name', 'type': 'string'}, 'store_first_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The first line of the address of the store', 'title': 'Store First Line'}, 'store_second_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The second line of the address of the store', 'title': 'Store Second Line'}, 'store_postcode': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The postcode of the store', 'title': 'Store Postcode'}, 'discount': {'anyOf': [{'type': 'number'}, {'type': 'null'}], 'description': 'The discount amount of the receipt', 'title': 'Discount'}}, 'required': ['date', 'total', 'items', 'items_price', 'items_quantity', 'reciept_category', 'store_name', 'store_first_line', 'store_second_line', 'store_postcode', 'discount'], 'title': 'Receipt', 'type': 'object', 'additionalProperties': False}, type='json_schema', description=None, strict=True)), top_logprobs=0, truncation='disabled', usage=ResponseUsage(input_tokens=26246, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=155, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=26401), user=None, prompt_cache_key=None, safety_identifier=None, store=True)
INFO:app.llm_handler:Receipt dictionary: {'date': datetime.datetime(2023, 7, 29, 17, 50, tzinfo=TzInfo(UTC)), 'total': 16.86, 'items': ['1 x Hot Wings Meal: 10 pc', '1 x Zinger Drip Burger Meal'], 'items_price': [11.99, 10.49], 'items_quantity': [1, 1], 'reciept_category': 'Eating out', 'store_name': 'KFC Eltham - High Street', 'store_first_line': 'Unknown', 'store_second_line': 'Unknown', 'store_postcode': 'Unknown', 'discount': 5.62}
INFO:app.notion_client:Creating new entry with properties: KFC Eltham - High Street
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:app.notion_client:Page created 
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/databases "HTTP/1.1 200 OK"
INFO:app.notion_client:Item database created: with 2 items
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:app.notion_client:Items created within page
2a04:4a43:85af:f346:6577:e2d9:5fbd:53d:0 - "POST /scan HTTP/1.1" 200
WARNING:security:Security event: {'event_type': 'receipt_scan_requested', 'client_ip': '2a04:4a43:85af:f346:6577:e2d9:5fbd:53d', 'user_agent': 'Scriptable/1 CFNetwork/3857.100.1 Darwin/25.0.0', 'method': 'POST', 'path': '/scan', 'file_size': 7096833, 'content_type': 'image/jpeg'}
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
INFO:app.llm_handler:OpenAIResponse: ParsedResponse[Receipt](id='resp_688947ef6474819192f88ad3231f11ab081eda0eed71caac', created_at=1753827311.0, error=None, incomplete_details=None, instructions=None, metadata={}, model='gpt-4o-mini-2024-07-18', object='response', output=[ParsedResponseOutputMessage[Receipt](id='msg_688947f0d9e48191b0bf99576e618578081eda0eed71caac', content=[ParsedResponseOutputText[Receipt](annotations=[], text='{\n  "date": "2023-10-03T00:00:00Z",\n  "total": 18.40,\n  "items": [\n    "DETTL SRF C/WPEX126",\n    "SIMPLE S DOG ST&NOD",\n    "JS DOG WIPES X15",\n    "ANDREX YLNG&AMB TX9"\n  ],\n  "items_price": [\n    4.00,\n    0.75,\n    2.15,\n    6.95\n  ],\n  "items_quantity": [\n    1,\n    1,\n    1,\n    1\n  ],\n  "reciept_category": "Grocery",\n  "store_name": "Sainsbury\'s",\n  "store_first_line": "33 Charterhouse Street",\n  "store_second_line": "London EC1M 6HA",\n  "store_postcode": null,\n  "discount": -2.70\n}', type='output_text', logprobs=[], parsed=Receipt(date=datetime.datetime(2023, 10, 3, 0, 0, tzinfo=TzInfo(UTC)), total=18.4, items=['DETTL SRF C/WPEX126', 'SIMPLE S DOG ST&NOD', 'JS DOG WIPES X15', 'ANDREX YLNG&AMB TX9'], items_price=[4.0, 0.75, 2.15, 6.95], items_quantity=[1, 1, 1, 1], reciept_category=<ReceiptCategory.GROCERY: 'Grocery'>, store_name="Sainsbury's", store_first_line='33 Charterhouse Street', store_second_line='London EC1M 6HA', store_postcode=None, discount=-2.7))], role='assistant', status='completed', type='message')], parallel_tool_calls=True, temperature=1.0, tool_choice='auto', tools=[], top_p=1.0, background=False, max_output_tokens=None, max_tool_calls=None, previous_response_id=None, prompt=None, reasoning=Reasoning(effort=None, generate_summary=None, summary=None), service_tier='default', status='completed', text=ResponseTextConfig(format=ResponseFormatTextJSONSchemaConfig(name='Receipt', schema_={'$defs': {'ReceiptCategory': {'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}}, 'properties': {'date': {'description': 'The date of the receipt in the format of YYYY-MM-DD', 'format': 'date-time', 'title': 'Date', 'type': 'string'}, 'total': {'description': 'The total amount of the receipt', 'title': 'Total', 'type': 'number'}, 'items': {'description': 'The items on the receipt', 'items': {'type': 'string'}, 'title': 'Items', 'type': 'array'}, 'items_price': {'description': 'The price of each item', 'items': {'type': 'number'}, 'title': 'Items Price', 'type': 'array'}, 'items_quantity': {'description': 'The quantity of each item', 'items': {'type': 'integer'}, 'title': 'Items Quantity', 'type': 'array'}, 'reciept_category': {'description': "The category of the receipt - Happy Happy, Grocery, Eating out, Miscellaneous. Happy Happy is the category for any purchases for leisure, shopping, etc. Grocery is the category for any purchases for groceries. Eating out is the category for any purchases for eating out. Miscellaneous is the category for any purchases that don't fit into the other categories.", 'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}, 'store_name': {'description': 'The name of the store', 'title': 'Store Name', 'type': 'string'}, 'store_first_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The first line of the address of the store', 'title': 'Store First Line'}, 'store_second_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The second line of the address of the store', 'title': 'Store Second Line'}, 'store_postcode': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The postcode of the store', 'title': 'Store Postcode'}, 'discount': {'anyOf': [{'type': 'number'}, {'type': 'null'}], 'description': 'The discount amount of the receipt', 'title': 'Discount'}}, 'required': ['date', 'total', 'items', 'items_price', 'items_quantity', 'reciept_category', 'store_name', 'store_first_line', 'store_second_line', 'store_postcode', 'discount'], 'title': 'Receipt', 'type': 'object', 'additionalProperties': False}, type='json_schema', description=None, strict=True)), top_logprobs=0, truncation='disabled', usage=ResponseUsage(input_tokens=26246, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=205, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=26451), user=None, prompt_cache_key=None, safety_identifier=None, store=True)
INFO:app.llm_handler:Receipt dictionary: {'date': datetime.datetime(2023, 10, 3, 0, 0, tzinfo=TzInfo(UTC)), 'total': 18.4, 'items': ['DETTL SRF C/WPEX126', 'SIMPLE S DOG ST&NOD', 'JS DOG WIPES X15', 'ANDREX YLNG&AMB TX9'], 'items_price': [4.0, 0.75, 2.15, 6.95], 'items_quantity': [1, 1, 1, 1], 'reciept_category': 'Grocery', 'store_name': "Sainsbury's", 'store_first_line': '33 Charterhouse Street', 'store_second_line': 'London EC1M 6HA', 'store_postcode': 'Unknown', 'discount': -2.7}
INFO:app.notion_client:Creating new entry with properties: Sainsbury's
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:app.notion_client:Page created 
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/databases "HTTP/1.1 200 OK"
INFO:app.notion_client:Item database created: with 4 items
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:app.notion_client:Items created within page
WARNING:security:Security event: {'event_type': 'receipt_scan_requested', 'client_ip': '2a04:4a43:85af:f346:6577:e2d9:5fbd:53d', 'user_agent': 'Scriptable/1 CFNetwork/3857.100.1 Darwin/25.0.0', 'method': 'POST', 'path': '/scan', 'file_size': 6240819, 'content_type': 'image/jpeg'}
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
INFO:app.llm_handler:OpenAIResponse: ParsedResponse[Receipt](id='resp_6889483bf5f4819c8b775b49f894cb4e085244c8c82665c7', created_at=1753827388.0, error=None, incomplete_details=None, instructions=None, metadata={}, model='gpt-4o-mini-2024-07-18', object='response', output=[ParsedResponseOutputMessage[Receipt](id='msg_6889483e4480819c90e88e50f0c5655d085244c8c82665c7', content=[ParsedResponseOutputText[Receipt](annotations=[], text='{\n  "date": "2023-07-29T17:44:00Z",\n  "total": 16.86,\n  "items": [\n    "1 x Hot Wings Meal: 10 pc",\n    "1 x Zinger Drip Burger Meal"\n  ],\n  "items_price": [\n    11.99,\n    10.49\n  ],\n  "items_quantity": [\n    1,\n    1\n  ],\n  "reciept_category": "Eating out",\n  "store_name": "Uber Eats",\n  "store_first_line": "Eltham - High Street",\n  "store_second_line": null,\n  "store_postcode": null,\n  "discount": 5.62\n}', type='output_text', logprobs=[], parsed=Receipt(date=datetime.datetime(2023, 7, 29, 17, 44, tzinfo=TzInfo(UTC)), total=16.86, items=['1 x Hot Wings Meal: 10 pc', '1 x Zinger Drip Burger Meal'], items_price=[11.99, 10.49], items_quantity=[1, 1], reciept_category=<ReceiptCategory.EATING_OUT: 'Eating out'>, store_name='Uber Eats', store_first_line='Eltham - High Street', store_second_line=None, store_postcode=None, discount=5.62))], role='assistant', status='completed', type='message')], parallel_tool_calls=True, temperature=1.0, tool_choice='auto', tools=[], top_p=1.0, background=False, max_output_tokens=None, max_tool_calls=None, previous_response_id=None, prompt=None, reasoning=Reasoning(effort=None, generate_summary=None, summary=None), service_tier='default', status='completed', text=ResponseTextConfig(format=ResponseFormatTextJSONSchemaConfig(name='Receipt', schema_={'$defs': {'ReceiptCategory': {'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}}, 'properties': {'date': {'description': 'The date of the receipt in the format of YYYY-MM-DD', 'format': 'date-time', 'title': 'Date', 'type': 'string'}, 'total': {'description': 'The total amount of the receipt', 'title': 'Total', 'type': 'number'}, 'items': {'description': 'The items on the receipt', 'items': {'type': 'string'}, 'title': 'Items', 'type': 'array'}, 'items_price': {'description': 'The price of each item', 'items': {'type': 'number'}, 'title': 'Items Price', 'type': 'array'}, 'items_quantity': {'description': 'The quantity of each item', 'items': {'type': 'integer'}, 'title': 'Items Quantity', 'type': 'array'}, 'reciept_category': {'description': "The category of the receipt - Happy Happy, Grocery, Eating out, Miscellaneous. Happy Happy is the category for any purchases for leisure, shopping, etc. Grocery is the category for any purchases for groceries. Eating out is the category for any purchases for eating out. Miscellaneous is the category for any purchases that don't fit into the other categories.", 'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}, 'store_name': {'description': 'The name of the store', 'title': 'Store Name', 'type': 'string'}, 'store_first_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The first line of the address of the store', 'title': 'Store First Line'}, 'store_second_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The second line of the address of the store', 'title': 'Store Second Line'}, 'store_postcode': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The postcode of the store', 'title': 'Store Postcode'}, 'discount': {'anyOf': [{'type': 'number'}, {'type': 'null'}], 'description': 'The discount amount of the receipt', 'title': 'Discount'}}, 'required': ['date', 'total', 'items', 'items_price', 'items_quantity', 'reciept_category', 'store_name', 'store_first_line', 'store_second_line', 'store_postcode', 'discount'], 'title': 'Receipt', 'type': 'object', 'additionalProperties': False}, type='json_schema', description=None, strict=True)), top_logprobs=0, truncation='disabled', usage=ResponseUsage(input_tokens=26246, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=155, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=26401), user=None, prompt_cache_key=None, safety_identifier=None, store=True)
INFO:app.llm_handler:Receipt dictionary: {'date': datetime.datetime(2023, 7, 29, 17, 44, tzinfo=TzInfo(UTC)), 'total': 16.86, 'items': ['1 x Hot Wings Meal: 10 pc', '1 x Zinger Drip Burger Meal'], 'items_price': [11.99, 10.49], 'items_quantity': [1, 1], 'reciept_category': 'Eating out', 'store_name': 'Uber Eats', 'store_first_line': 'Eltham - High Street', 'store_second_line': 'Unknown', 'store_postcode': 'Unknown', 'discount': 5.62}
INFO:app.notion_client:Creating new entry with properties: Uber Eats
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:app.notion_client:Page created 
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/databases "HTTP/1.1 200 OK"
INFO:app.notion_client:Item database created: with 2 items
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:app.notion_client:Items created within page
2a04:4a43:85af:f346:6577:e2d9:5fbd:53d:0 - "POST /scan HTTP/1.1" 200
[2025-07-29 23:17:03 +0100] [23552] [INFO] Handling signal: winch
[2025-07-30 07:22:09 +0100] [23552] [INFO] Handling signal: winch
[2025-07-30 07:38:39 +0100] [23552] [INFO] Handling signal: winch
82.132.214.173:0 - "POST /scan HTTP/1.1" 413
WARNING:security:Security event: {'event_type': 'receipt_scan_requested', 'client_ip': '82.132.214.173', 'user_agent': 'Scriptable/1 CFNetwork/3857.100.1 Darwin/25.0.0', 'method': 'POST', 'path': '/scan', 'file_size': 7293496, 'content_type': 'image/jpeg'}
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
INFO:app.llm_handler:OpenAIResponse: ParsedResponse[Receipt](id='resp_6889c12d731c81a0a22979a03fb92e2b04ea241705fd7195', created_at=1753858349.0, error=None, incomplete_details=None, instructions=None, metadata={}, model='gpt-4o-mini-2024-07-18', object='response', output=[ParsedResponseOutputMessage[Receipt](id='msg_6889c12f597481a08315edbcefacd07204ea241705fd7195', content=[ParsedResponseOutputText[Receipt](annotations=[], text='{"date":"2025-05-05T00:00:00Z","total":7.85,"items":["Mr Freed Smoked Salmon 200g"],"items_price":[7.85],"items_quantity":[1],"reciept_category":"Grocery","store_name":"Gilbert\'s","store_first_line":"Blooms","store_second_line":null,"store_postcode":null,"discount":null}', type='output_text', logprobs=[], parsed=Receipt(date=datetime.datetime(2025, 5, 5, 0, 0, tzinfo=TzInfo(UTC)), total=7.85, items=['Mr Freed Smoked Salmon 200g'], items_price=[7.85], items_quantity=[1], reciept_category=<ReceiptCategory.GROCERY: 'Grocery'>, store_name="Gilbert's", store_first_line='Blooms', store_second_line=None, store_postcode=None, discount=None))], role='assistant', status='completed', type='message')], parallel_tool_calls=True, temperature=1.0, tool_choice='auto', tools=[], top_p=1.0, background=False, max_output_tokens=None, max_tool_calls=None, previous_response_id=None, prompt=None, reasoning=Reasoning(effort=None, generate_summary=None, summary=None), service_tier='default', status='completed', text=ResponseTextConfig(format=ResponseFormatTextJSONSchemaConfig(name='Receipt', schema_={'$defs': {'ReceiptCategory': {'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}}, 'properties': {'date': {'description': 'The date of the receipt in the format of YYYY-MM-DD', 'format': 'date-time', 'title': 'Date', 'type': 'string'}, 'total': {'description': 'The total amount of the receipt', 'title': 'Total', 'type': 'number'}, 'items': {'description': 'The items on the receipt', 'items': {'type': 'string'}, 'title': 'Items', 'type': 'array'}, 'items_price': {'description': 'The price of each item', 'items': {'type': 'number'}, 'title': 'Items Price', 'type': 'array'}, 'items_quantity': {'description': 'The quantity of each item', 'items': {'type': 'integer'}, 'title': 'Items Quantity', 'type': 'array'}, 'reciept_category': {'description': "The category of the receipt - Happy Happy, Grocery, Eating out, Miscellaneous. Happy Happy is the category for any purchases for leisure, shopping, etc. Grocery is the category for any purchases for groceries. Eating out is the category for any purchases for eating out. Miscellaneous is the category for any purchases that don't fit into the other categories.", 'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}, 'store_name': {'description': 'The name of the store', 'title': 'Store Name', 'type': 'string'}, 'store_first_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The first line of the address of the store', 'title': 'Store First Line'}, 'store_second_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The second line of the address of the store', 'title': 'Store Second Line'}, 'store_postcode': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The postcode of the store', 'title': 'Store Postcode'}, 'discount': {'anyOf': [{'type': 'number'}, {'type': 'null'}], 'description': 'The discount amount of the receipt', 'title': 'Discount'}}, 'required': ['date', 'total', 'items', 'items_price', 'items_quantity', 'reciept_category', 'store_name', 'store_first_line', 'store_second_line', 'store_postcode', 'discount'], 'title': 'Receipt', 'type': 'object', 'additionalProperties': False}, type='json_schema', description=None, strict=True)), top_logprobs=0, truncation='disabled', usage=ResponseUsage(input_tokens=26246, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=86, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=26332), user=None, prompt_cache_key=None, safety_identifier=None, store=True)
INFO:app.llm_handler:Receipt dictionary: {'date': datetime.datetime(2025, 5, 5, 0, 0, tzinfo=TzInfo(UTC)), 'total': 7.85, 'items': ['Mr Freed Smoked Salmon 200g'], 'items_price': [7.85], 'items_quantity': [1], 'reciept_category': 'Grocery', 'store_name': "Gilbert's", 'store_first_line': 'Blooms', 'store_second_line': 'Unknown', 'store_postcode': 'Unknown', 'discount': 'Unknown'}
INFO:app.notion_client:Creating new entry with properties: Gilbert's
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 400 Bad Request"
82.132.214.173:0 - "POST /scan HTTP/1.1" 200
WARNING:security:Security event: {'event_type': 'receipt_scan_requested', 'client_ip': '82.132.214.173', 'user_agent': 'Scriptable/1 CFNetwork/3857.100.1 Darwin/25.0.0', 'method': 'POST', 'path': '/scan', 'file_size': 7899211, 'content_type': 'image/jpeg'}
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
INFO:app.llm_handler:OpenAIResponse: ParsedResponse[Receipt](id='resp_6889c288b43481a192c46f8078770b3003815235b78381fc', created_at=1753858697.0, error=None, incomplete_details=None, instructions=None, metadata={}, model='gpt-4o-mini-2024-07-18', object='response', output=[ParsedResponseOutputMessage[Receipt](id='msg_6889c28a53ec81a198316ca9b44d1b0e03815235b78381fc', content=[ParsedResponseOutputText[Receipt](annotations=[], text='{"date":"2023-10-30T00:00:00Z","total":40.21,"items":["JS MELON HONEYDEW","JS SPRING ONION BUNCH","JS CHOPPED OLD MUSHROOMS","JS GRATED CHEDDAR","STARTER PASTA SALT","JS WHOLE CUCUMBER","NECTOR PINEAPPLE","JS TETRA BEANS","JS BLUEBERRIES 300G","JS PUFF PASTRY 320G","NECTOR DINE","NECTOR TIER SAVE"],"items_price":[1.89,0.69,1.00,1.80,0.70,0.50,1.00,0.62,1.50,1.00,1.00,0.21],"items_quantity":[1,1,1,1,1,1,1,1,1,1,1,1],"reciept_category":"Grocery","store_name":"Sainsbury\'s","store_first_line":"33 Charterhouse Street","store_second_line":"London EC1M 6HA","store_postcode":null,"discount":5.54}', type='output_text', logprobs=[], parsed=Receipt(date=datetime.datetime(2023, 10, 30, 0, 0, tzinfo=TzInfo(UTC)), total=40.21, items=['JS MELON HONEYDEW', 'JS SPRING ONION BUNCH', 'JS CHOPPED OLD MUSHROOMS', 'JS GRATED CHEDDAR', 'STARTER PASTA SALT', 'JS WHOLE CUCUMBER', 'NECTOR PINEAPPLE', 'JS TETRA BEANS', 'JS BLUEBERRIES 300G', 'JS PUFF PASTRY 320G', 'NECTOR DINE', 'NECTOR TIER SAVE'], items_price=[1.89, 0.69, 1.0, 1.8, 0.7, 0.5, 1.0, 0.62, 1.5, 1.0, 1.0, 0.21], items_quantity=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], reciept_category=<ReceiptCategory.GROCERY: 'Grocery'>, store_name="Sainsbury's", store_first_line='33 Charterhouse Street', store_second_line='London EC1M 6HA', store_postcode=None, discount=5.54))], role='assistant', status='completed', type='message')], parallel_tool_calls=True, temperature=1.0, tool_choice='auto', tools=[], top_p=1.0, background=False, max_output_tokens=None, max_tool_calls=None, previous_response_id=None, prompt=None, reasoning=Reasoning(effort=None, generate_summary=None, summary=None), service_tier='default', status='completed', text=ResponseTextConfig(format=ResponseFormatTextJSONSchemaConfig(name='Receipt', schema_={'$defs': {'ReceiptCategory': {'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}}, 'properties': {'date': {'description': 'The date of the receipt in the format of YYYY-MM-DD', 'format': 'date-time', 'title': 'Date', 'type': 'string'}, 'total': {'description': 'The total amount of the receipt', 'title': 'Total', 'type': 'number'}, 'items': {'description': 'The items on the receipt', 'items': {'type': 'string'}, 'title': 'Items', 'type': 'array'}, 'items_price': {'description': 'The price of each item', 'items': {'type': 'number'}, 'title': 'Items Price', 'type': 'array'}, 'items_quantity': {'description': 'The quantity of each item', 'items': {'type': 'integer'}, 'title': 'Items Quantity', 'type': 'array'}, 'reciept_category': {'description': "The category of the receipt - Happy Happy, Grocery, Eating out, Miscellaneous. Happy Happy is the category for any purchases for leisure, shopping, etc. Grocery is the category for any purchases for groceries. Eating out is the category for any purchases for eating out. Miscellaneous is the category for any purchases that don't fit into the other categories.", 'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}, 'store_name': {'description': 'The name of the store', 'title': 'Store Name', 'type': 'string'}, 'store_first_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The first line of the address of the store', 'title': 'Store First Line'}, 'store_second_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The second line of the address of the store', 'title': 'Store Second Line'}, 'store_postcode': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The postcode of the store', 'title': 'Store Postcode'}, 'discount': {'anyOf': [{'type': 'number'}, {'type': 'null'}], 'description': 'The discount amount of the receipt', 'title': 'Discount'}}, 'required': ['date', 'total', 'items', 'items_price', 'items_quantity', 'reciept_category', 'store_name', 'store_first_line', 'store_second_line', 'store_postcode', 'discount'], 'title': 'Receipt', 'type': 'object', 'additionalProperties': False}, type='json_schema', description=None, strict=True)), top_logprobs=0, truncation='disabled', usage=ResponseUsage(input_tokens=26246, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=246, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=26492), user=None, prompt_cache_key=None, safety_identifier=None, store=True)
INFO:app.llm_handler:Receipt dictionary: {'date': datetime.datetime(2023, 10, 30, 0, 0, tzinfo=TzInfo(UTC)), 'total': 40.21, 'items': ['JS MELON HONEYDEW', 'JS SPRING ONION BUNCH', 'JS CHOPPED OLD MUSHROOMS', 'JS GRATED CHEDDAR', 'STARTER PASTA SALT', 'JS WHOLE CUCUMBER', 'NECTOR PINEAPPLE', 'JS TETRA BEANS', 'JS BLUEBERRIES 300G', 'JS PUFF PASTRY 320G', 'NECTOR DINE', 'NECTOR TIER SAVE'], 'items_price': [1.89, 0.69, 1.0, 1.8, 0.7, 0.5, 1.0, 0.62, 1.5, 1.0, 1.0, 0.21], 'items_quantity': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'reciept_category': 'Grocery', 'store_name': "Sainsbury's", 'store_first_line': '33 Charterhouse Street', 'store_second_line': 'London EC1M 6HA', 'store_postcode': 'Unknown', 'discount': 5.54}
INFO:app.notion_client:Creating new entry with properties: Sainsbury's
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:app.notion_client:Page created 
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/databases "HTTP/1.1 200 OK"
INFO:app.notion_client:Item database created: with 12 items
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
[2025-07-30 07:58:27 +0100] [23552] [CRITICAL] WORKER TIMEOUT (pid:23558)
[2025-07-30 07:58:27 +0100] [23552] [ERROR] Worker (pid:23558) was sent SIGABRT!
[2025-07-30 07:58:27 +0100] [66232] [INFO] Booting worker with pid: 66232
INFO:app.notion_client:NotionReceiptManager initialized
[2025-07-30 07:58:28 +0100] [66232] [INFO] Started server process [66232]
[2025-07-30 07:58:28 +0100] [66232] [INFO] Waiting for application startup.
[2025-07-30 07:58:28 +0100] [66232] [INFO] Application startup complete.
WARNING:security:Security event: {'event_type': 'receipt_scan_requested', 'client_ip': '82.132.214.173', 'user_agent': 'Scriptable/1 CFNetwork/3857.100.1 Darwin/25.0.0', 'method': 'POST', 'path': '/scan', 'file_size': 6438446, 'content_type': 'image/jpeg'}
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
INFO:app.llm_handler:OpenAIResponse: ParsedResponse[Receipt](id='resp_6889c2c0ffcc8192b5f1e307561523fa0d187307a27d5a2b', created_at=1753858753.0, error=None, incomplete_details=None, instructions=None, metadata={}, model='gpt-4o-mini-2024-07-18', object='response', output=[ParsedResponseOutputMessage[Receipt](id='msg_6889c2c2bd888192a209a894ec8d1b410d187307a27d5a2b', content=[ParsedResponseOutputText[Receipt](annotations=[], text='{"date":"2023-07-30T07:57:00Z","total":40.21,"items":["JS MELON HONEYDEW","JS PINEAPPLE","JS JONAGOLD BUNCH","JS RAINBOW CHARD BUNCH","JS CUCUMBER NIS","JS SPICE GIRL 0.33L","ISLE OF WIGHT SALT","JS EXTRA FINE RICE","BRASAS FRUIT","JS BLUEBERRIES 500G","TID PRAWNS RAW 200G","JS DARK CHOCOLATE","DELTAS DRINK","NECTAR DINE BAGS","JS MAYONNAISE","TID DOUBLE CREAM 300ML"],"items_price":[0.89,0.95,0.75,1.20,0.50,0.88,0.80,1.05,2.50,2.25,3.00,0.99,1.10,1.79,1.20,1.60],"items_quantity":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"reciept_category":"Grocery","store_name":"Sainsbury\'s","store_first_line":"33 Sainsbury\'s Supermarkets Ltd","store_second_line":"Charterhouse Street London","store_postcode":"EC1M 6HA","discount":0}', type='output_text', logprobs=[], parsed=Receipt(date=datetime.datetime(2023, 7, 30, 7, 57, tzinfo=TzInfo(UTC)), total=40.21, items=['JS MELON HONEYDEW', 'JS PINEAPPLE', 'JS JONAGOLD BUNCH', 'JS RAINBOW CHARD BUNCH', 'JS CUCUMBER NIS', 'JS SPICE GIRL 0.33L', 'ISLE OF WIGHT SALT', 'JS EXTRA FINE RICE', 'BRASAS FRUIT', 'JS BLUEBERRIES 500G', 'TID PRAWNS RAW 200G', 'JS DARK CHOCOLATE', 'DELTAS DRINK', 'NECTAR DINE BAGS', 'JS MAYONNAISE', 'TID DOUBLE CREAM 300ML'], items_price=[0.89, 0.95, 0.75, 1.2, 0.5, 0.88, 0.8, 1.05, 2.5, 2.25, 3.0, 0.99, 1.1, 1.79, 1.2, 1.6], items_quantity=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], reciept_category=<ReceiptCategory.GROCERY: 'Grocery'>, store_name="Sainsbury's", store_first_line="33 Sainsbury's Supermarkets Ltd", store_second_line='Charterhouse Street London', store_postcode='EC1M 6HA', discount=0.0))], role='assistant', status='completed', type='message')], parallel_tool_calls=True, temperature=1.0, tool_choice='auto', tools=[], top_p=1.0, background=False, max_output_tokens=None, max_tool_calls=None, previous_response_id=None, prompt=None, reasoning=Reasoning(effort=None, generate_summary=None, summary=None), service_tier='default', status='completed', text=ResponseTextConfig(format=ResponseFormatTextJSONSchemaConfig(name='Receipt', schema_={'$defs': {'ReceiptCategory': {'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}}, 'properties': {'date': {'description': 'The date of the receipt in the format of YYYY-MM-DD', 'format': 'date-time', 'title': 'Date', 'type': 'string'}, 'total': {'description': 'The total amount of the receipt', 'title': 'Total', 'type': 'number'}, 'items': {'description': 'The items on the receipt', 'items': {'type': 'string'}, 'title': 'Items', 'type': 'array'}, 'items_price': {'description': 'The price of each item', 'items': {'type': 'number'}, 'title': 'Items Price', 'type': 'array'}, 'items_quantity': {'description': 'The quantity of each item', 'items': {'type': 'integer'}, 'title': 'Items Quantity', 'type': 'array'}, 'reciept_category': {'description': "The category of the receipt - Happy Happy, Grocery, Eating out, Miscellaneous. Happy Happy is the category for any purchases for leisure, shopping, etc. Grocery is the category for any purchases for groceries. Eating out is the category for any purchases for eating out. Miscellaneous is the category for any purchases that don't fit into the other categories.", 'enum': ['Happy Happy', 'Grocery', 'Eating out', 'Miscellaneous'], 'title': 'ReceiptCategory', 'type': 'string'}, 'store_name': {'description': 'The name of the store', 'title': 'Store Name', 'type': 'string'}, 'store_first_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The first line of the address of the store', 'title': 'Store First Line'}, 'store_second_line': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The second line of the address of the store', 'title': 'Store Second Line'}, 'store_postcode': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'The postcode of the store', 'title': 'Store Postcode'}, 'discount': {'anyOf': [{'type': 'number'}, {'type': 'null'}], 'description': 'The discount amount of the receipt', 'title': 'Discount'}}, 'required': ['date', 'total', 'items', 'items_price', 'items_quantity', 'reciept_category', 'store_name', 'store_first_line', 'store_second_line', 'store_postcode', 'discount'], 'title': 'Receipt', 'type': 'object', 'additionalProperties': False}, type='json_schema', description=None, strict=True)), top_logprobs=0, truncation='disabled', usage=ResponseUsage(input_tokens=26246, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=309, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=26555), user=None, prompt_cache_key=None, safety_identifier=None, store=True)
INFO:app.llm_handler:Receipt dictionary: {'date': datetime.datetime(2023, 7, 30, 7, 57, tzinfo=TzInfo(UTC)), 'total': 40.21, 'items': ['JS MELON HONEYDEW', 'JS PINEAPPLE', 'JS JONAGOLD BUNCH', 'JS RAINBOW CHARD BUNCH', 'JS CUCUMBER NIS', 'JS SPICE GIRL 0.33L', 'ISLE OF WIGHT SALT', 'JS EXTRA FINE RICE', 'BRASAS FRUIT', 'JS BLUEBERRIES 500G', 'TID PRAWNS RAW 200G', 'JS DARK CHOCOLATE', 'DELTAS DRINK', 'NECTAR DINE BAGS', 'JS MAYONNAISE', 'TID DOUBLE CREAM 300ML'], 'items_price': [0.89, 0.95, 0.75, 1.2, 0.5, 0.88, 0.8, 1.05, 2.5, 2.25, 3.0, 0.99, 1.1, 1.79, 1.2, 1.6], 'items_quantity': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'reciept_category': 'Grocery', 'store_name': "Sainsbury's", 'store_first_line': "33 Sainsbury's Supermarkets Ltd", 'store_second_line': 'Charterhouse Street London', 'store_postcode': 'EC1M 6HA', 'discount': 0.0}
INFO:app.notion_client:Creating new entry with properties: Sainsbury's
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:app.notion_client:Page created 
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/databases "HTTP/1.1 200 OK"
INFO:app.notion_client:Item database created: with 16 items
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.notion.com/v1/pages "HTTP/1.1 200 OK"
[2025-07-30 07:59:29 +0100] [23552] [CRITICAL] WORKER TIMEOUT (pid:66232)
[2025-07-30 07:59:29 +0100] [23552] [ERROR] Worker (pid:66232) was sent SIGABRT!
[2025-07-30 07:59:29 +0100] [66700] [INFO] Booting worker with pid: 66700
INFO:app.notion_client:NotionReceiptManager initialized
[2025-07-30 07:59:29 +0100] [66700] [INFO] Started server process [66700]
[2025-07-30 07:59:29 +0100] [66700] [INFO] Waiting for application startup.
[2025-07-30 07:59:29 +0100] [66700] [INFO] Application startup complete.
127.0.0.1:52392 - "GET / HTTP/1.1" 200
127.0.0.1:52394 - "GET /favicon.ico HTTP/1.1" 404
127.0.0.1:52402 - "GET /health HTTP/1.1" 200
127.0.0.1:52499 - "GET /scan HTTP/1.1" 405
127.0.0.1:52501 - "GET / HTTP/1.1" 200
127.0.0.1:52783 - "GET / HTTP/1.1" 200
127.0.0.1:54124 - "GET /health HTTP/1.1" 200
127.0.0.1:54125 - "GET / HTTP/1.1" 200
127.0.0.1:54363 - "GET /health HTTP/1.1" 200
127.0.0.1:54364 - "GET / HTTP/1.1" 200
